> e1 := x^2*(diff(y(x), `$`(x, 2)))-2*x*(diff(y(x), x))+y(x) = 0;
print(`output redirected...`); # input placeholder
         2 / d  / d      \\       / d      \           
        x  |--- |--- y(x)|| - 2 x |--- y(x)| + y(x) = 0
           \ dx \ dx     //       \ dx     /           
> dsolve(e1, y(x));
print(`output redirected...`); # input placeholder
               /     (1/2)      \        /       (1/2)      \
               \1/2 5      + 3/2/        \- 1/2 5      + 3/2/
   y(x) = _C1 x                   + _C2 x                    

> ic1 := y(1) = 2;
print(`output redirected...`); # input placeholder
                            y(1) = 2
> ic2 := (D(y))(1) = 3;
print(`output redirected...`); # input placeholder
                          D(y)(1) = 3
> (D(y))(1);
print(`output redirected...`); # input placeholder
                            D(y)(1)
> sol1 := dsolve({e1, ic1, ic2}, y(x));
print(`output redirected...`); # input placeholder
               /     (1/2)      \    /       (1/2)      \
               \1/2 5      + 3/2/    \- 1/2 5      + 3/2/
       y(x) = x                   + x                    
> with(plots);
> plot(rhs(sol1), x = -infinity .. infinity);
%;


> equil := solve({2*x-1.2*x*y, -y+.9*x*y}, {x, y});
print(`output redirected...`); # input placeholder
      {x = 0., y = 0.}, {x = 1.111111111, y = 1.666666667}
> with(linalg);
print(`output redirected...`); # input placeholder
[BlockDiagonal, GramSchmidt, JordanBlock, LUdecomp, QRdecomp, 

  Wronskian, addcol, addrow, adj, adjoint, angle, augment, 

  backsub, band, basis, bezout, blockmatrix, charmat, charpoly, 

  cholesky, col, coldim, colspace, colspan, companion, concat, 

  cond, copyinto, crossprod, curl, definite, delcols, delrows, 

  det, diag, diverge, dotprod, eigenvals, eigenvalues, 

  eigenvectors, eigenvects, entermatrix, equal, exponential, 

  extend, ffgausselim, fibonacci, forwardsub, frobenius, 

  gausselim, gaussjord, geneqns, genmatrix, grad, hadamard, 

  hermite, hessian, hilbert, htranspose, ihermite, indexfunc, 

  innerprod, intbasis, inverse, ismith, issimilar, iszero, 

  jacobian, jordan, kernel, laplacian, leastsqrs, linsolve, 

  matadd, matrix, minor, minpoly, mulcol, mulrow, multiply, norm, 

  normalize, nullspace, orthog, permanent, pivot, potential, 

  randmatrix, randvector, rank, ratform, row, rowdim, rowspace, 

  rowspan, rref, scalarmul, singularvals, smith, stackmatrix, 

  submatrix, subvector, sumbasis, swapcol, swaprow, sylvester, 

  toeplitz, trace, transpose, vandermonde, vecpotent, vectdim, 

  vector, wronskian]
> with(VectorCalculus);
print(`output redirected...`); # input placeholder
[&x, *, +, -, ., `<,>`, `<|>`, About, AddCoordinates, ArcLength, 

  BasisFormat, Binormal, Compatibility, ConvertVector, CrossProd, 

  CrossProduct, Curl, Curvature, D, Del, DirectionalDiff, 

  Divergence, DotProd, DotProduct, Flux, GetCoordinateParameters, 

  GetCoordinates, GetNames, GetPVDescription, GetRootPoint, 

  GetSpace, Gradient, Hessian, IsPositionVector, IsRootedVector, 

  IsVectorField, Jacobian, Laplacian, LineInt, MapToBasis, Nabla, 

  Norm, Normalize, PathInt, PlotPositionVector, PlotVector, 

  PositionVector, PrincipalNormal, RadiusOfCurvature, 

  RootedVector, ScalarPotential, SetCoordinateParameters, 

  SetCoordinates, SpaceCurve, SurfaceInt, TNBFrame, Tangent, 

  TangentLine, TangentPlane, TangentVector, Torsion, Vector, 

  VectorField, VectorPotential, VectorSpace, Wronskian, diff, 

  eval, evalVF, int, limit, series]
> jm := Jacobian([2*x-1.2*x*y, -y+.9*x*y], [x, y]);
print(`output redirected...`); # input placeholder
                    Matrix(%id = 709357832)
> A1 := subs(equil[1], jm);
print(`output redirected...`); # input placeholder
                    Matrix(%id = 709891048)
> A2 := subs(equil[2], jm);
print(`output redirected...`); # input placeholder
                    Matrix(%id = 710022936)
> eigenvalues(A1);
print(`output redirected...`); # input placeholder
                   HFloat(-1.0), HFloat(2.0)
> eigenvalues(A2);
print(`output redirected...`); # input placeholder
                             -11                       
         -5.00000000000000 10    + 1.41421356219632 I, 

                               -11                     
           -5.00000000000000 10    - 1.41421356219632 I

> with(DETools);
print(`output redirected...`); # input placeholder
[AreSimilar, Closure, DEnormal, DEplot, DEplot3d, DEplot_polygon, 

  DFactor, DFactorLCLM, DFactorsols, Dchangevar, Desingularize, 

  FunctionDecomposition, GCRD, Gosper, Heunsols, Homomorphisms, 

  IVPsol, IsHyperexponential, LCLM, MeijerGsols, 

  MultiplicativeDecomposition, ODEInvariants, PDEchangecoords, 

  PolynomialNormalForm, RationalCanonicalForm, ReduceHyperexp, 

  RiemannPsols, Xchange, Xcommutator, Xgauge, Zeilberger, 

  abelsol, adjoint, autonomous, bernoullisol, buildsol, buildsym, 

  canoni, caseplot, casesplit, checkrank, chinisol, clairautsol, 

  constcoeffsols, convertAlg, convertsys, dalembertsol, dcoeffs, 

  de2diffop, dfieldplot, diff_table, diffop2de, dperiodic_sols, 

  dpolyform, dsubs, eigenring, endomorphism_charpoly, equinv, 

  eta_k, eulersols, exactsol, expsols, exterior_power, firint, 

  firtest, formal_sol, gen_exp, generate_ic, genhomosol, gensys, 

  hamilton_eqs, hypergeomsols, hyperode, indicialeq, infgen, 

  initialdata, integrate_sols, intfactor, invariants, 

  kovacicsols, leftdivision, liesol, line_int, linearsol, 

  matrixDE, matrix_riccati, maxdimsystems, moser_reduce, 

  muchange, mult, mutest, newton_polygon, normalG2, ode_int_y, 

  ode_y1, odeadvisor, odepde, parametricsol, particularsol, 

  phaseportrait, poincare, polysols, power_equivalent, 

  rational_equivalent, ratsols, redode, reduceOrder, 

  reduce_order, regular_parts, regularsp, remove_RootOf, 

  riccati_system, riccatisol, rifread, rifsimp, rightdivision, 

  rtaylor, separablesol, singularities, solve_group, 

  super_reduce, symgen, symmetric_power, symmetric_product, 

  symtest, transinv, translate, untranslate, varparam, zoom]
> DEplot([diff(x(t), t) = 2*x(t)-1.2*x(t)*y(t), diff(y(t), t) = -y(t)+.9*x(t)*y(t)], [x(t), y(t)], t = 0 .. 10, [[x(0) = 0, y(0) = .1]]);
%;

> DEplot([diff(x(t), t) = 2*x(t)-1.2*x(t)*y(t), diff(y(t), t) = -y(t)+.9*x(t)*y(t)], [x(t), y(t)], t = 0 .. 10, [[x(0) = 0, y(0) = -.1]]);
%;

> DEplot([diff(x(t), t) = 2*x(t)-1.2*x(t)*y(t), diff(y(t), t) = -y(t)+.9*x(t)*y(t)], [x(t), y(t)], t = 0 .. 10, [[x(0) = 0.1e-1, y(0) = -.1]]);
%;
Warning, plot may be incomplete, the following errors(s) were issued:
   cannot evaluate the solution further right of 3.6908162, probably a singularity

> DEplot([diff(x(t), t) = 2*x(t)-1.2*x(t)*y(t), diff(y(t), t) = -y(t)+.9*x(t)*y(t)], [x(t), y(t)], t = 0 .. 10, [[x(0) = -0.1e-10, y(0) = -.1]]);
%;

> DEplot([diff(x(t), t) = 2*x(t)-1.2*x(t)*y(t), diff(y(t), t) = -y(t)+.9*x(t)*y(t)], [x(t), y(t)], t = 0 .. 10, [[x(0) = 1.11, y(0) = 1.66]]);
%;

> DEplot([diff(x(t), t) = 2*x(t)-1.2*x(t)*y(t), diff(y(t), t) = -y(t)+.9*x(t)*y(t)], [x(t), y(t)], t = 0 .. 10, [[x(0) = .1, y(0) = 1.67]]);
%;

> DEplot([diff(x(t), t) = 2*x(t)-1.2*x(t)*y(t), diff(y(t), t) = -y(t)+.9*x(t)*y(t)], [x(t), y(t)], t = 0 .. 10, [[x(0) = 1.11, y(0) = .1]]);
%;


