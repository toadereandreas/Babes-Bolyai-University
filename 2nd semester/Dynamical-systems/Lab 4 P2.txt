ec2 := diff(x(t),t) = 1 - t * x(t) ^ 3;
                            d                   3
                     ec2 := -- x(t) = 1 - t x(t)
                            dt

> sol2 := dsolve(ec2,x(t));
Methods for first order ODEs:
--- Trying classification methods ---
trying a quadrature
trying 1st order linear
trying Bernoulli
trying separable
trying inverse linear
trying homogeneous types:
trying Chini
differential order: 1; looking for linear symmetries
trying exact
trying Abel
--- Trying Lie symmetry methods, 1st order ---
   -> Computing symmetries using: way = 3
   -> Computing symmetries using: way = 4
   -> Computing symmetries using: way = 2
trying symmetry patterns for 1st order ODEs
-> trying a symmetry pattern of the form [F(x)*G(y), 0]
-> trying a symmetry pattern of the form [0, F(x)*G(y)]
trying symmetry patterns of the forms [F(x),G(y)] and [G(y),F(x)]
-> trying a symmetry pattern of the form [F(x),G(x)]
-> trying a symmetry pattern of the form [F(y),G(y)]
-> trying a symmetry pattern of the form [F(x)+G(y), 0]
-> trying a symmetry pattern of the form [0, F(x)+G(y)]
-> trying a symmetry pattern of the form [F(x),G(x)*y+H(x)]

                               sol2 :=

> ?infolevel
> infolevel[dsolve] := 3;

                        infolevel[dsolve] := 3

> cond2 := x(0) = 0;

                          cond2 := x(0) = 0

> sol2 := dsolve({ec2,cond2},x(t));
Methods for first order ODEs:
--- Trying classification methods ---
trying a quadrature
trying 1st order linear
trying Bernoulli
trying separable
trying inverse linear
trying homogeneous types:
trying Chini
differential order: 1; looking for linear symmetries
trying exact
trying Abel
--- Trying Lie symmetry methods, 1st order ---
   -> Computing symmetries using: way = 3
   -> Computing symmetries using: way = 4
   -> Computing symmetries using: way = 2
trying symmetry patterns for 1st order ODEs
-> trying a symmetry pattern of the form [F(x)*G(y), 0]
-> trying a symmetry pattern of the form [0, F(x)*G(y)]
trying symmetry patterns of the forms [F(x),G(y)] and [G(y),F(x)]
-> trying a symmetry pattern of the form [F(x),G(x)]
-> trying a symmetry pattern of the form [F(y),G(y)]
-> trying a symmetry pattern of the form [F(x)+G(y), 0]
-> trying a symmetry pattern of the form [0, F(x)+G(y)]
-> trying a symmetry pattern of the form [F(x),G(x)*y+H(x)]

                               sol2 :=

> ?dfieldplot
> with(DEtools);

  [DEnormal, DEplot, DEplot3d, DEplot_polygon, DFactor, DFactorLCLM,

        DFactorsols, Dchangevar, GCRD, LCLM, MeijerGsols,

        PDEchangecoords, RiemannPsols, Xchange, Xcommutator, Xgauge,

        abelsol, adjoint, autonomous, bernoullisol, buildsol,

        buildsym, canoni, caseplot, casesplit, checkrank, chinisol,

        clairautsol, constcoeffsols, convertAlg, convertsys,

        dalembertsol, dcoeffs, de2diffop, dfieldplot, diffop2de,

        dpolyform, dsubs, eigenring, endomorphism_charpoly, equinv,

        eta_k, eulersols, exactsol, expsols, exterior_power, firint,

        firtest, formal_sol, gen_exp, generate_ic, genhomosol, gensys,

        hamilton_eqs, hypergeomsols, hyperode, indicialeq, infgen,

        initialdata, integrate_sols, intfactor, invariants,

        kovacicsols, leftdivision, liesol, line_int, linearsol,

        matrixDE, matrix_riccati, maxdimsystems, moser_reduce,

        muchange, mult, mutest, newton_polygon, normalG2, odeadvisor,

        odepde, parametricsol, phaseportrait, poincare, polysols,

        power_equivalent, ratsols, redode, reduceOrder, reduce_order,

        regular_parts, regularsp, remove_RootOf, riccati_system,

        riccatisol, rifread, rifsimp, rightdivision, rtaylor,

        separablesol, solve_group, super_reduce, symgen,

        symmetric_power, symmetric_product, symtest, transinv,

        translate, untranslate, varparam, zoom]

> f2 := unapply(rhs(sol2),t);
Error, wrong number (or type) of parameters in function rhs

> dfieldplot(ec2,x(t),t=-1..1,x=-1..1);

> 
> DEplot(ec2,x(t),t=0..2,[[x(0)=0]]);
dsolve/numeric:   entering dsolve/numeric
DEtools/convertsys:   converted to first-order system Y'(x) = f(x,Y(x))      namely (with Y' represented by YP)

                                           3
                        [YP[1] = 1 - t Y[1] ]

DEtools/convertsys:   correspondence between Y[i] names and original functions:

                            [Y[1] = x(t)]

dsolve/numeric:   array Y of initial conditions at x0 =   0.   array(1 .. 1,[(1)=0.])
dsolve/numeric:   the procedure F(x,Y,YP) for computing Y'(x) = f(x,Y(x)) is:   proc (N, t, Y, YP) option `[Y[1] = x(t)]`; YP[1] := 1-t*Y[1]^3 end proc

> 
